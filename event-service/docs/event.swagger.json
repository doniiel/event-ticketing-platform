{
  "swagger": "2.0",
  "info": {
    "title": "Event Service API",
    "description": "API for managing events in the ticketing platform.",
    "version": "1.0",
    "contact": {
      "name": "Event Team",
      "email": "support@example.com"
    }
  },
  "tags": [
    {
      "name": "EventService"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/events": {
      "get": {
        "operationId": "EventService_ListEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventListEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "EventService"
        ]
      },
      "post": {
        "operationId": "EventService_CreateEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventCreateEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventCreateEventRequest"
            }
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    },
    "/v1/events/{eventId}/check-availability": {
      "post": {
        "operationId": "EventService_CheckAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventCheckAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventServiceCheckAvailabilityBody"
            }
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    },
    "/v1/events/{id}": {
      "get": {
        "operationId": "EventService_GetEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventGetEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EventService"
        ]
      },
      "delete": {
        "operationId": "EventService_DeleteEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventDeleteEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EventService"
        ]
      },
      "put": {
        "operationId": "EventService_UpdateEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventUpdateEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventServiceUpdateEventBody"
            }
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    }
  },
  "definitions": {
    "EventServiceCheckAvailabilityBody": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EventServiceUpdateEventBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "ticketStock": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "eventCheckAvailabilityResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        }
      }
    },
    "eventCreateEventRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "ticketStock": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "eventCreateEventResponse": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/eventEvent"
        }
      }
    },
    "eventDeleteEventResponse": {
      "type": "object"
    },
    "eventEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "ticketStock": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "eventGetEventResponse": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/eventEvent"
        }
      }
    },
    "eventListEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventEvent"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "eventUpdateEventResponse": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/eventEvent"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
